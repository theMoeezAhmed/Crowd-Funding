// SPDX-License-Identifier: MIT

pragma solidity ^0.8.18;

import{PriceConvertor} from "./PriceConvertor.sol";

// constant, immutable

error NotOwner();

contract FundMe{
    using PriceConvertor for uint256;

    uint256 public constant MINIMUM_USD = 5 * 1e18;
 address[] public Funders;
 mapping (address funder=> uint256 amountFunded) public addressToAmountFunded;

  address public immutable i_owner;

  constructor() {
   i_owner = msg.sender;
  }

    function fund() public payable {
 msg.value.getconversionrate();
    require(msg.value.getconversionrate()>= MINIMUM_USD, "didn't send enough eth"); 
   Funders.push(msg.sender);
   addressToAmountFunded[msg.sender] = addressToAmountFunded[msg.sender] + msg.value;
    }

function withdraw() public onlyOwner {
    for (uint256 funderIndex = 0; funderIndex < Funders.length; funderIndex++){
        address funder = Funders[funderIndex];
        addressToAmountFunded[funder] = 0;
    }
    
    //msg.sender = address
    // payable(sg.sneder) = payable address

    Funders = new address[](0);
    // withdraw the funds

    // tranfsr
    // payable(msg.sender).transfer(address(this).balance);
    // send
    // bool sendSuccess = payable(msg.sender).send(address(this).balance);
    // require(sendSuccess, "send failed"); 
    // call
    (bool callSuccess, ) = payable (msg.sender).call{value: address(this).balance}("");
    require(callSuccess, "call failed");    
}

    modifier onlyOwner(){
        // require(i_owner == msg.sender, "Sender is Not Owner!");
    _;
    if(msg.sender!= i_owner) { revert NotOwner();}
    }
     
     receive() external payable { 
        fund();
     } 

     fallback() external payable { 
        fund();
     }
}
